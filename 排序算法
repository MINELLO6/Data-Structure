# Bubble Sort:冒泡排序

def bubbleSort(nums):
    for i in range(len(nums)-1,0,-1):
        for j in range(i):
            if nums[j]>nums[j+1]:
                temp=nums[j]
                nums[j]=nums[j+1]
                nums[j+1]=temp
    return nums
nums=[14,46,43,27,57,41,45,21,70,1]
bubbleSort(nums)

O(n^2),O(1)

# Insection Sort:插入排序

def insertion_sort(array):
    for i in range(1,len(array)):
        cur=array[i]
        j=i-1
        while j>=0 and array[j]>cur:
            array[j+1]=array[j]
            j-=1
        array[j+1]=cur
    return array

array = [50, 77, 55, 29, 10, 30, 66, 18, 80, 51]
insertion_sort(array)

O(n^2),O(1)

# Quick Sort:快排
# 分治(Divide and Conquer)算法的一种：即通过大问题变成小问题，然后将小问题逐个解决

def quickSort(nums,l,r):
    if len(nums)==1:
        return nums
    
    def partition(nums,l,r):
        pivot,ptr=nums[r],l
        for i in range(l,r):
            if nums[i]<=pivot:
                nums[i],nums[ptr]=nums[ptr],nums[i]
                ptr+=1
        nums[ptr],nums[r]=nums[r],nums[ptr]
        return ptr
    
    if l<r:
        pi=partition(nums,l,r)
        quickSort(nums,l,pi-1)
        quickSort(nums,pi+1,r)
    return nums
    
example = [2, 5, 6, 1, 4, 6, 2, 4, 7, 8]
quickSort(example,0,len(example)-1)

# 时间复杂度O(n^2) 平均时间复杂度(nlogN)
# 空间复杂度O(n) 平均空间复杂度(logN):递归树的深度乘上每一层的空间复杂度

# Merge Sort:归并排序-同分治算法

def mergeSort(myList):
    if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]

        # Recursive call on each half
        mergeSort(left)
        mergeSort(right)

        # Two iterators for traversing the two halves
        i = 0
        j = 0
        
        # Iterator for the main list
        k = 0
        
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
              # The value from the left half has been used
              myList[k] = left[i]
              # Move the iterator forward
              i += 1
            else:
                myList[k] = right[j]
                j += 1
            # Move to the next slot
            k += 1

        # For all the remaining values
        while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k]=right[j]
            j += 1
            k += 1

myList = [54,26,93,17,77,31,44,55,20]
mergeSort(myList)

O(nlogn) O(n)

# Timsort
# Heapsort
# Tree Sort
# Shell Sort
# Bucket Sort
# Raidx Sort
# Counting Sort
# Cubesort
